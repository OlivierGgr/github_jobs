{"version":3,"sources":["API/GithubAPI.js","Components/Search/Search.js","Components/Jobs/Jobs.js","Components/JobItem/JobItem.js","App.js","serviceWorker.js","index.js"],"names":["getJobsOnMount","page","url","console","log","fetch","then","res","json","catch","err","Search","props","useState","userSearch","setUserSearch","userLocation","setUserLocation","fullTime","setFullTime","userSearchInputs","data","dataFromSearch","windowWidth","setWindowWidth","resizeWindow","window","innerWidth","useEffect","addEventListener","removeEventListener","className","id","type","placeholder","value","onChange","e","target","htmlFor","name","onClick","Jobs","logo","src","alt","company","style","height","textDecoration","color","to","pathname","key","title","location","jobDate","created_at","split","dateFormatting","margin","border","JobItem","jobDetails","setJobDetails","isLoading","setIsLoading","useParams","getJobById","company_logo","parse","description","how_to_apply","App","setPage","offers","setOffers","filterJobs","incomingData","text","forEach","element","marginBottom","basename","process","exact","path","render","map","item","index","Array","prototype","push","apply","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.f96ad90f.chunk.js","sourcesContent":["export function getJobsOnMount(page){\n    const url = 'https://cors-anywhere.herokuapp.com/https://jobs.github.com/positions.json?page='+ page\n    console.log(url)\n    return fetch(url)\n        .then(res => res.json())\n        .catch(err => console.log(err))\n}\n\nexport function getJobsFilter(text, fullTime, location){\n    const url = 'https://cors-anywhere.herokuapp.com/https://jobs.github.com/positions.json?' \n    + 'description=' + text + '&full_time=' + fullTime + '&location=' + location\n\n    return fetch(url)\n        .then(res => res.json())\n        .catch(err => console.log('err'))\n}\n\nexport function getJobById(id) {\n    const url = 'https://cors-anywhere.herokuapp.com/https://jobs.github.com/positions/' + id +'.json'\n\n    return fetch(url)\n        .then(res => res.json())\n        .catch(err => console.log('err'))\n}","import React, { useState, useEffect} from 'react';\nimport './Search.css';\n\nfunction Search(props) {\n\n    const [userSearch, setUserSearch] = useState('')\n    const [userLocation, setUserLocation] = useState('')\n    const [fullTime, setFullTime] = useState(false)\n\n    // SENDING SEARCH DATA TO PARENT COMPONENT\n    const userSearchInputs = (data) => {\n        props.dataFromSearch(data)\n    }\n\n    // SETTING UP SEARCH BAR FOR PHONE SCREENS (-500px)\n    const smallScreen = () => {\n        return(\n            <div className=\"smallSearchContainer\">\n            <div className=\"smallInputsContainer\">\n                <div className=\"smallSearchBarContainer\">\n                    <input id=\"searchByTerm\" type=\"text\" placeholder=\"Search jobs by term\" value={userSearch} onChange={e => setUserSearch(e.target.value)}/>\n                </div>\n                <div className=\"smallLocationFulltimeContainer\">\n                    <div className=\"smallLocationContainer\">\n                        <input type=\"text\" placeholder=\"Location\" value={userLocation} onChange={e => setUserLocation(e.target.value)}/>\n                    </div>\n                    <div className=\"smallFullTimeContainer\">\n                        <label id=\"fulltimeLabel\" htmlFor=\"fulltime\" >Full time only</label>\n                        <input type=\"checkbox\" name=\"fulltime\" value={fullTime} \n                        onClick={() => setFullTime(!fullTime)}/>\n                    </div>\n                </div>\n\n            </div>\n\n            <div className=\"smallButtonContainer\">\n                <button onClick={() => userSearchInputs([userSearch, userLocation, fullTime])}>Search</button>\n            </div>\n        </div>\n        )\n    }\n\n    // SETTING UP SEARCH BAR FOR NON-PHONE SCREENS (+500px)\n    const standardScreen = () => {\n        return(\n            (\n                <div className=\"searchContainer\">\n                    <div className=\"searchBarContainer\">\n                        <input type=\"text\" placeholder=\"Search jobs by term\" value={userSearch} onChange={e => setUserSearch(e.target.value)}/>\n                    </div>\n                    <div className=\"locationContainer\">\n                        <input type=\"text\" placeholder=\"Location\" value={userLocation} onChange={e => setUserLocation(e.target.value)}/>\n                    </div>\n                    <div className=\"fullTimeContainer\">\n                        <label id=\"fulltimeLabel\" htmlFor=\"fulltime\">Full time only</label>\n                        <input type=\"checkbox\" name=\"fulltime\" value={fullTime} \n                        onClick={() => setFullTime(!fullTime)}/>\n                    </div>\n                    <div className=\"buttonContainer\">\n                        <button onClick={() => userSearchInputs([userSearch, userLocation, fullTime])}>Search</button>\n                    </div>\n                </div>\n              )\n        )\n    }\n\n    // CONSIDERING WINDOW WIDTH TO ADAPT DISPLAY\n    const [windowWidth, setWindowWidth] = useState(0);\n    let resizeWindow = () => {\n        setWindowWidth(window.innerWidth);\n    };\n      \n    useEffect(() => {\n        resizeWindow();\n            window.addEventListener(\"resize\", resizeWindow);\n        return () => window.removeEventListener(\"resize\", resizeWindow);\n    }, []);\n\n    // ADAPT DISPLAY\n    return windowWidth < 500 ?\n        smallScreen()\n        : standardScreen()\n}\n\nexport default Search;\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport './Jobs.css'\n\nfunction Jobs(props){\n    // FORMAT DATE FOR HUMAN EYES\n    const dateFormatting = () => {\n        let jobDate = props.created_at.split(' ')\n        return `${jobDate[2]} ${jobDate[1]} ${jobDate[5]}`\n    }\n\n    return(\n        <div className=\"jobItemContainer\">\n            <div className=\"jobCard\">\n                <div className=\"jobCardCompanyLogo\">\n                    {props.logo !== null ?\n                        <img src={props.logo} alt={props.company} style={{ height: \"1.6rem\"}}/>\n                        : <img src=\"http://via.placeholder.com/66x25\" alt={props.company} style={{ height: \"1.6rem\"}}/>\n                                    }\n                </div>\n                <div className=\"jobCardInfo\">\n                    <div className=\"jobCardTitle\">\n                    <Link \n                        style={{ textDecoration: \"none\", color: \"inherit\"}}\n                        to={{ pathname: \"/jobOffer/\"+props.id,\n                        key:props.id,\n                        }}>\n                        {props.title}\n                    </Link>\n                </div>\n                <div className=\"jobCardBody\">\n                    <span>\n                    {props.company}\n                    </span>\n                    <span>\n                    {props.location} - {props.type}\n                </span>\n                <span>\n                    {dateFormatting()}\n                </span>\n                    </div>\n                <hr style={{margin: \"8px 10%\", border: \"1px solid #92BCEA\"}}/>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Jobs;","import React, { useState, useEffect} from 'react'\nimport { useParams } from \"react-router\";\nimport { Link } from 'react-router-dom'\nimport parse from 'html-react-parser';\nimport { getJobById } from '../../API/GithubAPI'\nimport './JobItem.css'\n\nfunction JobItem(props) {\n    const [jobDetails, setJobDetails] = useState()\n    const [isLoading, setIsLoading] = useState(true)\n    // TAKE ID FROM URL\n    const { id } = useParams()\n\n    // USE ID TO LOAD JOB POSITION\n    useEffect(() =>  {\n        getJobById(id)\n            .then(res => {\n                setJobDetails(res)\n                setIsLoading(false)\n            })\n    }, []);\n\n    // FORMAT DATE FOR HUMAN EYES\n    const dateFormatting = () => {\n        let jobDate = jobDetails.created_at.split(' ')\n        return `${jobDate[2]} ${jobDate[1]} ${jobDate[5]}`\n    }\n\n    return (isLoading ? \n        <div className=\"jobItemContainer\">\n            <h2>Loading</h2>\n        </div>\n    :\n        <div className=\"jobItemContainer\">\n            <div className=\"jobItemContainerTop\">\n                    <div className=\"jobItemContainerTopReturn\">\n                        <Link to=\"/\"><button className=\"jobItemContainerTopReturnBtn\">Return</button></Link>\n                    </div>\n                    <div className=\"jobItemContainerTopTitle\">\n                        {jobDetails.title}\n                    </div>\n\n            </div>\n            <div className=\"jobItemContainerDate info\">\n                {dateFormatting()}\n            </div>\n            <div className=\"jobItemContainerCompany\">\n                <div className=\"jobItemContainerCompanyLogo\"><img src={jobDetails.company_logo} alt={jobDetails.company}/></div>\n                <div className=\"jobItemContainerCompanyName\">{jobDetails.company}</div>\n            </div>\n            <div className=\"jobItemContainerInfo info\">\n                <div className=\"jobItemContainerInfoLocation\">{jobDetails.location}</div>\n                <div className=\"jobItemContainerInfoType\">{jobDetails.type}</div>\n            </div>\n            <div className=\"jobItemContainerDescription\">\n            {parse(jobDetails.description)}\n            </div>\n            <hr id=\"jobItemHrToApply\"/>\n            <div className=\"jobItemContainerApply\">\n                <p id=\"howToApply\">\n                    How to apply\n                </p>\n                {parse(jobDetails.how_to_apply)}\n            </div>\n        </div>\n    )\n}\n\nexport default JobItem;","import React, { useState, useEffect } from 'react';\nimport { getJobsOnMount, getJobsFilter } from './API/GithubAPI'\nimport Search from './Components/Search/Search'\nimport Jobs from './Components/Jobs/Jobs'\nimport JobItem from './Components/JobItem/JobItem'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport './App.css';\n\nfunction App() {\n  const [page, setPage] = useState(1)\n  const [offers, setOffers] = useState();\n  const [isLoading, setIsLoading] = useState(true)\n\n  useEffect(() => {\n    getJobsOnMount(page)\n    .then(res => {\n          setOffers(res)\n          setIsLoading(false)\n    })\n  }, []);\n\n  const loadMorePositions = () => {\n    setPage(page +1)\n    getJobsOnMount(page +1)\n      .then(res => {\n        Array.prototype.push.apply(offers, res)\n      })\n  }\n\n  const jobsFactory = (data) => {\n    if (!isLoading) {\n      return data !== [] ?\n      data.map((item, index) => \n      { return <Jobs title={item.title} \n                    location={item.location} \n                    company={item.company} \n                    created_at={item.created_at}\n                    type={item.type}\n                    logo={item.company_logo}\n                    id={item.id}\n                    key={index}\n                    /> \n                  })\n                  : \n                  <h2>\n                    no positions available\n                  </h2>\n    } else return (\n      <div className=\"loadingMessageContainer\">\n        Loading ...\n      </div>\n    )\n  }\n\n  const filterJobs = (incomingData) => {\n    setOffers([])\n    setIsLoading(true)\n    incomingData.forEach(element => element === \"\" ? element = false : false)\n    getJobsFilter(incomingData[0], incomingData[2], incomingData[1])\n      .then(res => {\n        setOffers(res)\n        setIsLoading(false)\n      })\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"titleContainer\">\n        <h1>Github Jobs</h1>\n      </div>\n\n      <div className=\"bodyContainer\" >\n        <div className=\"searchBodyContainer\" style={{marginBottom:'5%'}}>\n        <Router basename={process.env.PUBLIC_URL}>\n          <Switch>\n            <Route exact path=\"/\" render={() => (\n              <div>\n                <Search dataFromSearch={data => filterJobs(data)}/>\n                <div className=\"listResultsContainer\">\n                    <div className=\"jobContainerTopBlueBar\"></div>\n                    {jobsFactory(offers)}\n                </div>\n                <button id=\"seeMoreBtn\" onClick={() => loadMorePositions()}>See more</button>\n              </div>\n            )}>\n            </Route>\n            <Route path=\"/jobOffer/:id\" render={() => (\n              <div className=\"listResultsContainer\">\n                <div className=\"jobContainerTopBlueBar\"></div>\n                <JobItem />\n              </div>\n            )}/>\n          </Switch>\n        </Router>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n    // <Router>\n        <App />\n    // </Router>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}