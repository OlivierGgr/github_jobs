{"version":3,"sources":["API/GithubAPI.js","Components/Search/Search.js","Components/Jobs/Jobs.js","Components/JobItem/JobItem.js","App.js","serviceWorker.js","index.js"],"names":["getJobsOnMount","page","url","console","log","fetch","then","res","json","catch","err","Search","props","useState","userSearch","setUserSearch","userLocation","setUserLocation","fullTime","setFullTime","didMountRef","useRef","useEffect","current","userSearchInputs","data","dataFromSearch","windowWidth","setWindowWidth","setWindowHeight","resizeWindow","window","innerWidth","innerHeight","addEventListener","removeEventListener","className","id","type","placeholder","value","onChange","e","target","htmlFor","name","onClick","Jobs","logo","src","alt","company","style","height","textDecoration","color","to","pathname","key","title","location","jobDate","created_at","split","dateFormatting","margin","border","JobItem","jobDetails","setJobDetails","isLoading","setIsLoading","useParams","getJobById","company_logo","parse","description","how_to_apply","App","setPage","offers","setOffers","setLoadMore","filterJobs","incomingData","text","forEach","element","marginBottom","basename","process","exact","path","render","map","item","index","Array","prototype","push","apply","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.b6cf9f58.chunk.js","sourcesContent":["export function getJobsOnMount(page){\n    const url = 'https://cors-anywhere.herokuapp.com/https://jobs.github.com/positions.json?page='+ page\n    console.log(url)\n    return fetch(url)\n        .then(res => res.json())\n        .catch(err => console.log(err))\n}\n\nexport function getJobsFilter(text, fullTime, location){\n    const url = 'https://cors-anywhere.herokuapp.com/https://jobs.github.com/positions.json?' \n    + 'description=' + text + '&full_time=' + fullTime + '&location=' + location\n\n    return fetch(url)\n        .then(res => res.json())\n        .catch(err => console.log('err'))\n}\n\nexport function getJobById(id) {\n    const url = 'https://cors-anywhere.herokuapp.com/https://jobs.github.com/positions/' + id +'.json'\n\n    return fetch(url)\n        .then(res => res.json())\n        .catch(err => console.log('err'))\n}","import React, { useState, useEffect, useRef} from 'react';\nimport './Search.css';\n\nfunction Search(props) {\n\n    const [userSearch, setUserSearch] = useState('')\n    const [userLocation, setUserLocation] = useState('')\n    const [fullTime, setFullTime] = useState(false)\n\n    //didMountRef KEEPS USEEFFECT FROM BEING TRIGGERED ON MOUNT\n    const didMountRef = useRef(false)\n    useEffect(() => {\n        if(didMountRef.current) { \n        } else didMountRef.current = true\n    })\n\n    const userSearchInputs = (data) => {\n        props.dataFromSearch(data)\n    }\n\n    const smallScreen = () => {\n        return(\n            <div className=\"smallSearchContainer\">\n            <div className=\"smallInputsContainer\">\n                <div className=\"smallSearchBarContainer\">\n                    <input id=\"searchByTerm\" type=\"text\" placeholder=\"Search jobs by term\" value={userSearch} onChange={e => setUserSearch(e.target.value)}/>\n                </div>\n                <div className=\"smallLocationFulltimeContainer\">\n                    <div className=\"smallLocationContainer\">\n                        <input type=\"text\" placeholder=\"Location\" value={userLocation} onChange={e => setUserLocation(e.target.value)}/>\n                    </div>\n                    <div className=\"smallFullTimeContainer\">\n                        <label id=\"fulltimeLabel\" htmlFor=\"fulltime\" >Full time only</label>\n                        <input type=\"checkbox\" name=\"fulltime\" value={fullTime} \n                        onClick={() => setFullTime(!fullTime)}/>\n                    </div>\n                </div>\n\n            </div>\n\n            <div className=\"smallButtonContainer\">\n                <button onClick={() => userSearchInputs([userSearch, userLocation, fullTime])}>Search</button>\n            </div>\n        </div>\n        )\n    }\n\n    const standardScreen = () => {\n        return(\n            (\n                <div className=\"searchContainer\">\n                    <div className=\"searchBarContainer\">\n                        <input type=\"text\" placeholder=\"Search jobs by term\" value={userSearch} onChange={e => setUserSearch(e.target.value)}/>\n                    </div>\n                    <div className=\"locationContainer\">\n                        <input type=\"text\" placeholder=\"Location\" value={userLocation} onChange={e => setUserLocation(e.target.value)}/>\n                    </div>\n                    <div className=\"fullTimeContainer\">\n                        <label id=\"fulltimeLabel\" htmlFor=\"fulltime\">Full time only</label>\n                        <input type=\"checkbox\" name=\"fulltime\" value={fullTime} \n                        onClick={() => setFullTime(!fullTime)}/>\n                    </div>\n                    <div className=\"buttonContainer\">\n                        <button onClick={() => userSearchInputs([userSearch, userLocation, fullTime])}>Search</button>\n                    </div>\n                </div>\n              )\n        )\n    }\n        const [windowWidth, setWindowWidth] = useState(0);\n        const [windowHeight, setWindowHeight] = useState(0);\n        let resizeWindow = () => {\n          setWindowWidth(window.innerWidth);\n          setWindowHeight(window.innerHeight);\n        };\n      \n        useEffect(() => {\n          resizeWindow();\n          window.addEventListener(\"resize\", resizeWindow);\n          return () => window.removeEventListener(\"resize\", resizeWindow);\n        }, []);\n\n    return windowWidth < 500 ?\n        smallScreen()\n        : standardScreen()\n}\n\nexport default Search;\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport './Jobs.css'\n\nfunction Jobs(props){\n    const dateFormatting = () => {\n        let jobDate = props.created_at.split(' ')\n        return `${jobDate[2]} ${jobDate[1]} ${jobDate[5]}`\n    }\n\n    const expand = (id) => {\n        // props.dataFromSearch(id)\n    }\n\n    return(\n        <div className=\"jobItemContainer\">\n            <div className=\"jobCard\" \n            >\n                <div className=\"jobCardCompanyLogo\">\n                    {props.logo !== null ?\n                        <img src={props.logo} alt={props.company} style={{ height: \"1.6rem\"}}/>\n                        : <img src=\"http://via.placeholder.com/66x25\" alt={props.company} style={{ height: \"1.6rem\"}}/>\n                                    }\n                </div>\n                <div className=\"jobCardInfo\">\n                    <div className=\"jobCardTitle\">\n                    <Link \n                        style={{ textDecoration: \"none\", color: \"inherit\"}}\n                        to={{ pathname: \"/jobOffer/\"+props.id,\n                        key:props.id,\n                        }}>\n                        {props.title}\n                    </Link>\n                </div>\n                <div className=\"jobCardBody\">\n                    <span>\n                    {props.company}\n                    </span>\n                    <span>\n                    {props.location} - {props.type}\n                </span>\n                <span>\n                    {dateFormatting()}\n                </span>\n                    </div>\n                <hr style={{margin: \"8px 10%\", border: \"1px solid #92BCEA\"}}/>\n                {expand(props.id)}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Jobs;","import React, { useState, useEffect} from 'react'\nimport { useParams } from \"react-router\";\nimport { Link } from 'react-router-dom'\nimport parse from 'html-react-parser';\nimport { getJobById } from '../../API/GithubAPI'\nimport './JobItem.css'\n\nfunction JobItem(props) {\n    const [jobDetails, setJobDetails] = useState()\n    const [isLoading, setIsLoading] = useState(true)\n    const { id } = useParams()\n\n    useEffect(() =>  {\n        getJobById(id)\n            .then(res => {\n                setJobDetails(res)\n                setIsLoading(false)\n            })\n    }, []);\n\n    const dateFormatting = () => {\n        let jobDate = jobDetails.created_at.split(' ')\n        return `${jobDate[2]} ${jobDate[1]} ${jobDate[5]}`\n    }\n\n    console.log(id)\n    console.log(jobDetails)\n    return (isLoading ? \n        <div className=\"jobItemContainer\">\n            <h2>Loading</h2>\n        </div>\n    :\n        <div className=\"jobItemContainer\">\n            <div className=\"jobItemContainerTop\">\n                {/* <div className=\"jobItemContainerTopElements\"> */}\n                    <div className=\"jobItemContainerTopReturn\">\n                        <Link to=\"/\"><button className=\"jobItemContainerTopReturnBtn\">Return</button></Link>\n                    </div>\n                    <div className=\"jobItemContainerTopTitle\">\n                        {jobDetails.title}\n                    </div>\n                {/* </div> */}\n                \n\n            </div>\n            <div className=\"jobItemContainerDate info\">\n                {/* {jobDetails.created_at} */}\n                {dateFormatting()}\n            </div>\n            <div className=\"jobItemContainerCompany\">\n                <div className=\"jobItemContainerCompanyLogo\"><img src={jobDetails.company_logo} alt={jobDetails.company}/></div>\n                <div className=\"jobItemContainerCompanyName\">{jobDetails.company}</div>\n            </div>\n            <div className=\"jobItemContainerInfo info\">\n                <div className=\"jobItemContainerInfoLocation\">{jobDetails.location}</div>\n                <div className=\"jobItemContainerInfoType\">{jobDetails.type}</div>\n            </div>\n            <div className=\"jobItemContainerDescription\">\n            {parse(jobDetails.description)}\n            </div>\n            <hr id=\"jobItemHrToApply\"/>\n            <div className=\"jobItemContainerApply\">\n                <p id=\"howToApply\">\n                    How to apply\n                </p>\n                {parse(jobDetails.how_to_apply)}\n                {/* <button className=\"jobItemContainerApplyBtn\">\n                    Apply\n                </button> */}\n            </div>\n        </div>\n    )\n}\n\nexport default JobItem;","import React, { useState, useEffect } from 'react';\nimport { getJobsOnMount, getJobsFilter } from './API/GithubAPI'\nimport Search from './Components/Search/Search'\nimport Jobs from './Components/Jobs/Jobs'\nimport JobItem from './Components/JobItem/JobItem'\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\n\nimport './App.css';\n\nfunction App() {\n  const [page, setPage] = useState(1)\n  const [offers, setOffers] = useState();\n  const [isLoading, setIsLoading] = useState(true)\n  const [selectedOffer, setSelectedOffer] = useState()\n  const [loadMore, setLoadMore] = useState(false)\n\n  useEffect(() => {\n    getJobsOnMount(page)\n    .then(res => {\n          setOffers(res)\n          setIsLoading(false)\n    })\n  }, []);\n\n  const loadMorePositions = () => {\n    setPage(page +1)\n    getJobsOnMount(page +1)\n      .then(res => {\n        Array.prototype.push.apply(offers, res)\n      })\n    setLoadMore(true)\n  }\n\n  console.log(offers)\n\n\n  const jobsFactory = (data) => {\n    if (!isLoading) {\n      return data !== [] ?\n      data.map((item, index) => \n      { return <Jobs title={item.title} \n                    location={item.location} \n                    company={item.company} \n                    created_at={item.created_at}\n                    type={item.type}\n                    logo={item.company_logo}\n                    id={item.id}\n                    key={index}\n                    /> \n                  })\n                  : \n                  <h2>\n                    no positions available\n                  </h2>\n    } else return (\n      <div className=\"loadingMessageContainer\">\n        Loading ...\n      </div>\n    )\n  }\n\n  const filterJobs = (incomingData) => {\n    setOffers([])\n    setIsLoading(true)\n    incomingData.forEach(element => element === \"\" ? element = false : false)\n    getJobsFilter(incomingData[0], incomingData[2], incomingData[1])\n      .then(res => {\n        setOffers(res)\n        setIsLoading(false)\n      })\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"titleContainer\">\n        <h1>Github Jobs</h1>\n      </div>\n\n      <div className=\"bodyContainer\" >\n        <div className=\"searchBodyContainer\" style={{marginBottom:'5%'}}>\n        <Router basename={process.env.PUBLIC_URL}>\n          <Switch>\n            <Route exact path=\"/\" render={() => (\n              <div>\n                <Search dataFromSearch={data => filterJobs(data)}/>\n                <div className=\"listResultsContainer\">\n                    <div className=\"jobContainerTopBlueBar\"></div>\n                    {jobsFactory(offers)}\n                </div>\n                <button id=\"seeMoreBtn\" onClick={() => loadMorePositions()}>See more</button>\n              </div>\n            )}>\n            </Route>\n            <Route path=\"/jobOffer/:id\" render={() => (\n              <div className=\"listResultsContainer\">\n                <div className=\"jobContainerTopBlueBar\"></div>\n                <JobItem />\n              </div>\n            )}/>\n          </Switch>\n        </Router>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n    // <Router>\n        <App />\n    // </Router>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}